/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Assessment } from "./Assessment";
import { AssessmentCountArgs } from "./AssessmentCountArgs";
import { AssessmentFindManyArgs } from "./AssessmentFindManyArgs";
import { AssessmentFindUniqueArgs } from "./AssessmentFindUniqueArgs";
import { CreateAssessmentArgs } from "./CreateAssessmentArgs";
import { UpdateAssessmentArgs } from "./UpdateAssessmentArgs";
import { DeleteAssessmentArgs } from "./DeleteAssessmentArgs";
import { RiskFindManyArgs } from "../../risk/base/RiskFindManyArgs";
import { Risk } from "../../risk/base/Risk";
import { Application } from "../../application/base/Application";
import { User } from "../../user/base/User";
import { AssessmentService } from "../assessment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Assessment)
export class AssessmentResolverBase {
  constructor(
    protected readonly service: AssessmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "read",
    possession: "any",
  })
  async _assessmentsMeta(
    @graphql.Args() args: AssessmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Assessment])
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "read",
    possession: "any",
  })
  async assessments(
    @graphql.Args() args: AssessmentFindManyArgs
  ): Promise<Assessment[]> {
    return this.service.assessments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Assessment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "read",
    possession: "own",
  })
  async assessment(
    @graphql.Args() args: AssessmentFindUniqueArgs
  ): Promise<Assessment | null> {
    const result = await this.service.assessment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assessment)
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "create",
    possession: "any",
  })
  async createAssessment(
    @graphql.Args() args: CreateAssessmentArgs
  ): Promise<Assessment> {
    return await this.service.createAssessment({
      ...args,
      data: {
        ...args.data,

        application: args.data.application
          ? {
              connect: args.data.application,
            }
          : undefined,

        assessor: args.data.assessor
          ? {
              connect: args.data.assessor,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Assessment)
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "update",
    possession: "any",
  })
  async updateAssessment(
    @graphql.Args() args: UpdateAssessmentArgs
  ): Promise<Assessment | null> {
    try {
      return await this.service.updateAssessment({
        ...args,
        data: {
          ...args.data,

          application: args.data.application
            ? {
                connect: args.data.application,
              }
            : undefined,

          assessor: args.data.assessor
            ? {
                connect: args.data.assessor,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Assessment)
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "delete",
    possession: "any",
  })
  async deleteAssessment(
    @graphql.Args() args: DeleteAssessmentArgs
  ): Promise<Assessment | null> {
    try {
      return await this.service.deleteAssessment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Risk], { name: "risks" })
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "any",
  })
  async findRisks(
    @graphql.Parent() parent: Assessment,
    @graphql.Args() args: RiskFindManyArgs
  ): Promise<Risk[]> {
    const results = await this.service.findRisks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "application",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplication(
    @graphql.Parent() parent: Assessment
  ): Promise<Application | null> {
    const result = await this.service.getApplication(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "assessor",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getAssessor(
    @graphql.Parent() parent: Assessment
  ): Promise<User | null> {
    const result = await this.service.getAssessor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
