/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AssessmentService } from "../assessment.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AssessmentCreateInput } from "./AssessmentCreateInput";
import { Assessment } from "./Assessment";
import { AssessmentFindManyArgs } from "./AssessmentFindManyArgs";
import { AssessmentWhereUniqueInput } from "./AssessmentWhereUniqueInput";
import { AssessmentUpdateInput } from "./AssessmentUpdateInput";
import { RiskFindManyArgs } from "../../risk/base/RiskFindManyArgs";
import { Risk } from "../../risk/base/Risk";
import { RiskWhereUniqueInput } from "../../risk/base/RiskWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AssessmentControllerBase {
  constructor(
    protected readonly service: AssessmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Assessment })
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAssessment(
    @common.Body() data: AssessmentCreateInput
  ): Promise<Assessment> {
    return await this.service.createAssessment({
      data: {
        ...data,

        application: data.application
          ? {
              connect: data.application,
            }
          : undefined,

        assessor: data.assessor
          ? {
              connect: data.assessor,
            }
          : undefined,
      },
      select: {
        application: {
          select: {
            id: true,
          },
        },

        assessor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Assessment] })
  @ApiNestedQuery(AssessmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assessments(@common.Req() request: Request): Promise<Assessment[]> {
    const args = plainToClass(AssessmentFindManyArgs, request.query);
    return this.service.assessments({
      ...args,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        assessor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async assessment(
    @common.Param() params: AssessmentWhereUniqueInput
  ): Promise<Assessment | null> {
    const result = await this.service.assessment({
      where: params,
      select: {
        application: {
          select: {
            id: true,
          },
        },

        assessor: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAssessment(
    @common.Param() params: AssessmentWhereUniqueInput,
    @common.Body() data: AssessmentUpdateInput
  ): Promise<Assessment | null> {
    try {
      return await this.service.updateAssessment({
        where: params,
        data: {
          ...data,

          application: data.application
            ? {
                connect: data.application,
              }
            : undefined,

          assessor: data.assessor
            ? {
                connect: data.assessor,
              }
            : undefined,
        },
        select: {
          application: {
            select: {
              id: true,
            },
          },

          assessor: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Assessment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAssessment(
    @common.Param() params: AssessmentWhereUniqueInput
  ): Promise<Assessment | null> {
    try {
      return await this.service.deleteAssessment({
        where: params,
        select: {
          application: {
            select: {
              id: true,
            },
          },

          assessor: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/risks")
  @ApiNestedQuery(RiskFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "any",
  })
  async findRisks(
    @common.Req() request: Request,
    @common.Param() params: AssessmentWhereUniqueInput
  ): Promise<Risk[]> {
    const query = plainToClass(RiskFindManyArgs, request.query);
    const results = await this.service.findRisks(params.id, {
      ...query,
      select: {
        assessment: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        mitigationPlan: true,
        owner: true,
        summary: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/risks")
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "update",
    possession: "any",
  })
  async connectRisks(
    @common.Param() params: AssessmentWhereUniqueInput,
    @common.Body() body: RiskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      risks: {
        connect: body,
      },
    };
    await this.service.updateAssessment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/risks")
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "update",
    possession: "any",
  })
  async updateRisks(
    @common.Param() params: AssessmentWhereUniqueInput,
    @common.Body() body: RiskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      risks: {
        set: body,
      },
    };
    await this.service.updateAssessment({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/risks")
  @nestAccessControl.UseRoles({
    resource: "Assessment",
    action: "update",
    possession: "any",
  })
  async disconnectRisks(
    @common.Param() params: AssessmentWhereUniqueInput,
    @common.Body() body: RiskWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      risks: {
        disconnect: body,
      },
    };
    await this.service.updateAssessment({
      where: params,
      data,
      select: { id: true },
    });
  }
}
