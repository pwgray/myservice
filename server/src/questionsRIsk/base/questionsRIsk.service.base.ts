/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QuestionsRIsk, // @ts-ignore
  Question, // @ts-ignore
  Risk,
} from "@prisma/client";

export class QuestionsRIskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.QuestionsRIskCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskCountArgs>
  ): Promise<number> {
    return this.prisma.questionsRIsk.count(args);
  }

  async questionsRIsks<T extends Prisma.QuestionsRIskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskFindManyArgs>
  ): Promise<QuestionsRIsk[]> {
    return this.prisma.questionsRIsk.findMany(args);
  }
  async questionsRIsk<T extends Prisma.QuestionsRIskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskFindUniqueArgs>
  ): Promise<QuestionsRIsk | null> {
    return this.prisma.questionsRIsk.findUnique(args);
  }
  async createQuestionsRIsk<T extends Prisma.QuestionsRIskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskCreateArgs>
  ): Promise<QuestionsRIsk> {
    return this.prisma.questionsRIsk.create<T>(args);
  }
  async updateQuestionsRIsk<T extends Prisma.QuestionsRIskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskUpdateArgs>
  ): Promise<QuestionsRIsk> {
    return this.prisma.questionsRIsk.update<T>(args);
  }
  async deleteQuestionsRIsk<T extends Prisma.QuestionsRIskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionsRIskDeleteArgs>
  ): Promise<QuestionsRIsk> {
    return this.prisma.questionsRIsk.delete(args);
  }

  async getQuestion(parentId: string): Promise<Question | null> {
    return this.prisma.questionsRIsk
      .findUnique({
        where: { id: parentId },
      })
      .question();
  }

  async getRisk(parentId: string): Promise<Risk | null> {
    return this.prisma.questionsRIsk
      .findUnique({
        where: { id: parentId },
      })
      .risk();
  }
}
