/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { QuestionsRIsk } from "./QuestionsRIsk";
import { QuestionsRIskCountArgs } from "./QuestionsRIskCountArgs";
import { QuestionsRIskFindManyArgs } from "./QuestionsRIskFindManyArgs";
import { QuestionsRIskFindUniqueArgs } from "./QuestionsRIskFindUniqueArgs";
import { CreateQuestionsRIskArgs } from "./CreateQuestionsRIskArgs";
import { UpdateQuestionsRIskArgs } from "./UpdateQuestionsRIskArgs";
import { DeleteQuestionsRIskArgs } from "./DeleteQuestionsRIskArgs";
import { Question } from "../../question/base/Question";
import { Risk } from "../../risk/base/Risk";
import { QuestionsRIskService } from "../questionsRIsk.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => QuestionsRIsk)
export class QuestionsRIskResolverBase {
  constructor(
    protected readonly service: QuestionsRIskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "read",
    possession: "any",
  })
  async _questionsRIsksMeta(
    @graphql.Args() args: QuestionsRIskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [QuestionsRIsk])
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "read",
    possession: "any",
  })
  async questionsRIsks(
    @graphql.Args() args: QuestionsRIskFindManyArgs
  ): Promise<QuestionsRIsk[]> {
    return this.service.questionsRIsks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => QuestionsRIsk, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "read",
    possession: "own",
  })
  async questionsRIsk(
    @graphql.Args() args: QuestionsRIskFindUniqueArgs
  ): Promise<QuestionsRIsk | null> {
    const result = await this.service.questionsRIsk(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestionsRIsk)
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "create",
    possession: "any",
  })
  async createQuestionsRIsk(
    @graphql.Args() args: CreateQuestionsRIskArgs
  ): Promise<QuestionsRIsk> {
    return await this.service.createQuestionsRIsk({
      ...args,
      data: {
        ...args.data,

        question: args.data.question
          ? {
              connect: args.data.question,
            }
          : undefined,

        risk: args.data.risk
          ? {
              connect: args.data.risk,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => QuestionsRIsk)
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "update",
    possession: "any",
  })
  async updateQuestionsRIsk(
    @graphql.Args() args: UpdateQuestionsRIskArgs
  ): Promise<QuestionsRIsk | null> {
    try {
      return await this.service.updateQuestionsRIsk({
        ...args,
        data: {
          ...args.data,

          question: args.data.question
            ? {
                connect: args.data.question,
              }
            : undefined,

          risk: args.data.risk
            ? {
                connect: args.data.risk,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QuestionsRIsk)
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "delete",
    possession: "any",
  })
  async deleteQuestionsRIsk(
    @graphql.Args() args: DeleteQuestionsRIskArgs
  ): Promise<QuestionsRIsk | null> {
    try {
      return await this.service.deleteQuestionsRIsk(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Question, {
    nullable: true,
    name: "question",
  })
  @nestAccessControl.UseRoles({
    resource: "Question",
    action: "read",
    possession: "any",
  })
  async getQuestion(
    @graphql.Parent() parent: QuestionsRIsk
  ): Promise<Question | null> {
    const result = await this.service.getQuestion(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Risk, {
    nullable: true,
    name: "risk",
  })
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "any",
  })
  async getRisk(@graphql.Parent() parent: QuestionsRIsk): Promise<Risk | null> {
    const result = await this.service.getRisk(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
