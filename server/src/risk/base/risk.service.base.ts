/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Risk, // @ts-ignore
  QuestionsRIsk,
} from "@prisma/client";

export class RiskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.RiskCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskCountArgs>
  ): Promise<number> {
    return this.prisma.risk.count(args);
  }

  async risks<T extends Prisma.RiskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFindManyArgs>
  ): Promise<Risk[]> {
    return this.prisma.risk.findMany(args);
  }
  async risk<T extends Prisma.RiskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskFindUniqueArgs>
  ): Promise<Risk | null> {
    return this.prisma.risk.findUnique(args);
  }
  async createRisk<T extends Prisma.RiskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskCreateArgs>
  ): Promise<Risk> {
    return this.prisma.risk.create<T>(args);
  }
  async updateRisk<T extends Prisma.RiskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskUpdateArgs>
  ): Promise<Risk> {
    return this.prisma.risk.update<T>(args);
  }
  async deleteRisk<T extends Prisma.RiskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RiskDeleteArgs>
  ): Promise<Risk> {
    return this.prisma.risk.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionsRIskFindManyArgs
  ): Promise<QuestionsRIsk[]> {
    return this.prisma.risk
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }
}
