/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Risk } from "./Risk";
import { RiskCountArgs } from "./RiskCountArgs";
import { RiskFindManyArgs } from "./RiskFindManyArgs";
import { RiskFindUniqueArgs } from "./RiskFindUniqueArgs";
import { CreateRiskArgs } from "./CreateRiskArgs";
import { UpdateRiskArgs } from "./UpdateRiskArgs";
import { DeleteRiskArgs } from "./DeleteRiskArgs";
import { QuestionsRIskFindManyArgs } from "../../questionsRIsk/base/QuestionsRIskFindManyArgs";
import { QuestionsRIsk } from "../../questionsRIsk/base/QuestionsRIsk";
import { RiskService } from "../risk.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Risk)
export class RiskResolverBase {
  constructor(
    protected readonly service: RiskService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "any",
  })
  async _risksMeta(
    @graphql.Args() args: RiskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Risk])
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "any",
  })
  async risks(@graphql.Args() args: RiskFindManyArgs): Promise<Risk[]> {
    return this.service.risks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Risk, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "read",
    possession: "own",
  })
  async risk(@graphql.Args() args: RiskFindUniqueArgs): Promise<Risk | null> {
    const result = await this.service.risk(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Risk)
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "create",
    possession: "any",
  })
  async createRisk(@graphql.Args() args: CreateRiskArgs): Promise<Risk> {
    return await this.service.createRisk({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Risk)
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "update",
    possession: "any",
  })
  async updateRisk(@graphql.Args() args: UpdateRiskArgs): Promise<Risk | null> {
    try {
      return await this.service.updateRisk({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Risk)
  @nestAccessControl.UseRoles({
    resource: "Risk",
    action: "delete",
    possession: "any",
  })
  async deleteRisk(@graphql.Args() args: DeleteRiskArgs): Promise<Risk | null> {
    try {
      return await this.service.deleteRisk(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [QuestionsRIsk], { name: "questions" })
  @nestAccessControl.UseRoles({
    resource: "QuestionsRIsk",
    action: "read",
    possession: "any",
  })
  async findQuestions(
    @graphql.Parent() parent: Risk,
    @graphql.Args() args: QuestionsRIskFindManyArgs
  ): Promise<QuestionsRIsk[]> {
    const results = await this.service.findQuestions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
