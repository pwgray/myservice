/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Questionnaire, // @ts-ignore
  Question, // @ts-ignore
  Application,
} from "@prisma/client";

export class QuestionnaireServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.QuestionnaireCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireCountArgs>
  ): Promise<number> {
    return this.prisma.questionnaire.count(args);
  }

  async questionnaires<T extends Prisma.QuestionnaireFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireFindManyArgs>
  ): Promise<Questionnaire[]> {
    return this.prisma.questionnaire.findMany(args);
  }
  async questionnaire<T extends Prisma.QuestionnaireFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireFindUniqueArgs>
  ): Promise<Questionnaire | null> {
    return this.prisma.questionnaire.findUnique(args);
  }
  async createQuestionnaire<T extends Prisma.QuestionnaireCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireCreateArgs>
  ): Promise<Questionnaire> {
    return this.prisma.questionnaire.create<T>(args);
  }
  async updateQuestionnaire<T extends Prisma.QuestionnaireUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireUpdateArgs>
  ): Promise<Questionnaire> {
    return this.prisma.questionnaire.update<T>(args);
  }
  async deleteQuestionnaire<T extends Prisma.QuestionnaireDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QuestionnaireDeleteArgs>
  ): Promise<Questionnaire> {
    return this.prisma.questionnaire.delete(args);
  }

  async findQuestions(
    parentId: string,
    args: Prisma.QuestionFindManyArgs
  ): Promise<Question[]> {
    return this.prisma.questionnaire
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .questions(args);
  }

  async getApplication(parentId: string): Promise<Application | null> {
    return this.prisma.questionnaire
      .findUnique({
        where: { id: parentId },
      })
      .application();
  }
}
